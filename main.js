(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=new(function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._url=e.baseUrl,this._header=e.headers}var n,r;return n=t,(r=[{key:"_getResponseData",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getProfileInfo",value:function(){var e=this;return fetch("".concat(this._url,"/users/me"),{headers:this._header}).then((function(t){return e._getResponseData(t)})).catch((function(e){return Promise.reject(e)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._url,"/cards"),{headers:this._header}).then((function(t){return e._getResponseData(t)})).catch((function(e){return Promise.reject(e)}))}},{key:"editProfileInfo",value:function(e){var t=this;return fetch("".concat(this._url,"/users/me"),{method:"PATCH",headers:this._header,body:JSON.stringify({name:e.name,about:e.bio})}).then((function(e){return t._getResponseData(e)})).catch((function(e){return Promise.reject(e)}))}},{key:"addNewCard",value:function(e){var t=this;return fetch("".concat(this._url,"/cards"),{method:"POST",headers:this._header,body:JSON.stringify({name:e.title,link:e.link})}).then((function(e){return t._getResponseData(e)})).catch((function(e){return Promise.reject(e)}))}},{key:"deleteCard",value:function(){var e=this;return fetch("".concat(this._url,"/cards/").concat(cardId),{method:"DELETE",headers:this._header}).then((function(t){return e._getResponseData(t)})).catch((function(e){return Promise.reject(e)}))}},{key:"putLike",value:function(e){var t=this;return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"PUT",headers:this._header}).then((function(e){return t._getResponseData(e)})).catch((function(e){return Promise.reject(e)}))}},{key:"deleteLike",value:function(e){var t=this;return fetch("".concat(this._url,"/cards/").concat(e,"/likes"),{method:"DELETE",headers:this._header}).then((function(e){return t._getResponseData(e)})).catch((function(e){return Promise.reject(e)}))}},{key:"editUserAvatar",value:function(e){var t=this;return fetch("".concat(this._url,"/users/me/avatar"),{method:"PATCH",headers:this._header,body:JSON.stringify({avatar:e})}).then((function(e){return t._getResponseData(e)})).catch((function(e){return Promise.reject(e)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}())({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-52",headers:{authorization:"8cd6391f-276f-4623-87db-26168ea0dc10","Content-Type":"application/json"}});function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n,r,o,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=t.name,this._link=t.link,this._like=t.likes,this._cardId=t._id,this._userId=r,this._ownerId=t.owner,this._templateSelector=n,this._handleCardClick=o,this._handleSureCardDelete=i,this._likeUpdate=a}var t,r;return t=e,(r=[{key:"_handleCardLike",value:function(){this.checkLike()?this.likeBtn.classList.remove("cards__heart_active"):this.likeBtn.classList.add("cards__heart_active"),this._element.querySelector(".cards__likes").textContent=this._like.length}},{key:"setLike",value:function(e){this._like=e,this._handleCardLike()}},{key:"checkLike",value:function(){var e=this;this._like.some((function(t){return t._id===e._userId}))}},{key:"_handleCardDelete",value:function(){this._element.remove(),this._element=null}},{key:"_createCard",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".cards__card").cloneNode(!0)}},{key:"_setEventListeners",value:function(){var e=this;this.likeBtn=this._element.querySelector(".cards__heart"),this.likeBtn.addEventListener("click",(function(){e._likeUpdate(e,e._cardId)})),this._element.querySelector(".cards__delete").addEventListener("click",(function(){e._handleSureCardDelete()})),this._element.querySelector(".cards__image-button").addEventListener("click",(function(){e._handleCardClick({name:e._name,link:e._link})}))}},{key:"addCard",value:function(){return this._element=this._createCard(),this._setEventListeners(),this._element.querySelector(".cards__text").textContent=this._name,this._element.querySelector(".cards__image").src=this._link,this._element.querySelector(".cards__image").alt=this._name,this._element.querySelector(".cards__likes").textContent=this._like.length,this._ownerId._id!=this._userId&&this._element.querySelector(".cards__delete").remove(),this._element}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._validationConfig=t,this._formElement=n,this._inputs=Array.from(this._formElement.querySelectorAll(this._validationConfig.inputSelector)),this._forms=Array.from(document.querySelectorAll(this._validationConfig.formSelector)),this._button=n.querySelector(this._validationConfig.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_showInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._validationConfig.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._validationConfig.errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._validationConfig.inputErrorClass),t.classList.remove(this._validationConfig.errorClass),t.textContent=""}},{key:"_setButtonDisabled",value:function(){this._button.classList.add(this._validationConfig.inactiveButtonClass),this._button.setAttribute("disabled",!0)}},{key:"_setButtonActive",value:function(){this._button.classList.remove(this._validationConfig.inactiveButtonClass),this._button.removeAttribute("disabled",!1)}},{key:"_toggleButtonState",value:function(){this._inputs.some((function(e){return!e.validity.valid}))?this._setButtonDisabled():this._setButtonActive()}},{key:"_handleSetValidate",value:function(){var e=this;this._inputs.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))}))}},{key:"resetValidation",value:function(){var e=this;this._inputs.forEach((function(t){e._hideInputError(t),e._setButtonDisabled()}))}},{key:"enableValidation",value:function(){this._handleSetValidate()}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleKeyEscape")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleKeyEscape)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleKeyEscape)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){t.target.classList.contains("popup_opened")&&e.close(),t.target.classList.contains("popup__close")&&e.close()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}function l(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,p(e,t,"get"))}function f(e,t,n){return function(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}(e,p(e,t,"set"),n),n}function p(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}var h=new WeakMap,d=new WeakMap,_=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,h,{writable:!0,value:void 0}),s(this,d,{writable:!0,value:void 0}),f(this,h,r),f(this,d,document.querySelector(n))}var t,n;return t=e,(n=[{key:"addItem",value:function(e){l(this,d).prepend(e)}},{key:"renderer",value:function(e,t){var n=this;e.forEach((function(e){l(n,h).call(n,e,t)}))}}])&&c(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=b(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},m.apply(this,arguments)}function b(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}function k(e,t){if(t&&("object"===y(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return k(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imageElement=t._popup.querySelector(".popup-image__photo"),t._imageTitle=t._popup.querySelector(".popup-image__text"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.title,n=e.link;m(w(a.prototype),"open",this).call(this),this._imageElement.src=n,this._imageElement.alt=t,this._imageTitle.textContent=t}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(u);function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=j(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function j(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=I(e)););return e}function P(e,t){return P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},P(e,t)}function L(e,t){if(t&&("object"===E(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function I(e){return I=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},I(e)}var q=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=I(r);if(o){var n=I(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleFormSubmit=t,n._form=n._popup.querySelector(".popup__form"),n._inputs=n._form.querySelectorAll(".popup__input"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputsValues={},this._inputs.forEach((function(t){e._inputsValues[t.name]=t.value})),this._inputsValues}},{key:"setEventListeners",value:function(){var e=this;O(I(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"setInputValues",value:function(e){this._inputs.forEach((function(t){t.value=e[t.name]}))}},{key:"close",value:function(){O(I(a.prototype),"close",this).call(this),this._form.reset()}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(u);function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var T=function(){function e(t){var n=t.nameSelector,r=t.bioSelector,o=t.avatarSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._bio=document.querySelector(r),this._avatar=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userInfo={name:this._name.textContent,bio:this._bio.textContent},this._userInfo}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._bio.textContent=e.bio}},{key:"setAllInfo",value:function(e){this._name.textContent=e.name,this._bio.textContent=e.about,this._avatar.src=e.avatar,this._id=e._id}},{key:"getUserId",value:function(){return this._id}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),D=document.querySelector(".profile__edit-button"),A=document.querySelector(".profile-popup__form"),x=document.querySelector(".profile__add-button"),B=document.querySelector(".popup-add__form"),V=document.querySelector(".profile__image"),U=document.querySelector(".popup-avatar__form"),N={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"};function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var J=new i(N,A);J.enableValidation();var K=new i(N,B);K.enableValidation();var z=new i(N,U);z.enableValidation();var F=new T({nameSelector:".profile__title",bioSelector:".profile__text",avatarSelector:".profile__image"}),H=new _({renderer:function(e){H.addItem(Y(e))}},".cards__table");Promise.all([t.getProfileInfo(),t.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,u=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){u=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(u)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];F.setAllInfo(o),H.renderer(i)})).catch((function(e){console.log("Error load cards",e)}));var W=new u(".popup__delete");W.setEventListeners();var $=function(){W.open()};D.addEventListener("click",(function(){G.open(),J.resetValidation();var e=F.getUserInfo();G.setInputValues(e)}));var G=new q(".profile-popup",(function(e){t.editProfileInfo(e).then((function(t){F.setUserInfo(e)})).catch((function(e){console.log("Error updating profile",e)}))}));G.setEventListeners(),V.addEventListener("click",(function(){Q.open(),z.resetValidation()}));var Q=new q(".popup-avatar",(function(e){t.editUserAvatar(e["avatar-link"]).then((function(e){document.querySelector(".profile__image").src=e.avatar})).catch((function(e){console.log("Error updating avatar",e)}))}));Q.setEventListeners(),x.addEventListener("click",(function(){Z.open(),K.resetValidation()}));var X=function(e,n){e.checkLike()?t.deleteLike(n).then((function(t){e.setLike(t.likes)})):t.putLike(n).then((function(t){e.setLike(t.likes)}))};function Y(e){return new r(e,".template",F.getUserId(),te,$,X).addCard()}var Z=new q(".popup-add",(function(e){t.addNewCard(e).then((function(e){H.addItem(Y(e))})).catch((function(e){console.log("Error add card",e)}))}));Z.setEventListeners();var ee=new S(".popup-image"),te=function(e){var t=e.name,n=e.link;ee.open({name:t,link:n})};ee.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQWNuQyxHQUdwQixPQUZhLElBQUl6RixFQUFLeUYsRUFBTSxZQUFhZ0MsRUFBUzZCLFlBQWFuSixHQUFpQkMsRUFBc0JDLEdBRTFGa0osU0FDZixDQUdBLElBQU1MLEVBQWUsSUFBSXJELEVBQWMsY0FBYyxTQUFDMkQsR0FDbkR4TCxFQUFJeUwsV0FBV0QsR0FBVTFLLE1BQUssU0FBQzJHLEdBQzVCaUMsRUFBU0MsUUFBUUMsRUFBY25DLEdBQ2xDLElBQUd6RyxPQUFNLFNBQUNDLEdBQ1BpSixRQUFRQyxJQUFJLGlCQUFrQmxKLEVBQ2pDLEdBRUgsSUFFQWlLLEVBQWFiLG9CQUViLElBQU1xQixHQUFpQixJQUFJaEUsRUFBZSxnQkFHcEN2RixHQUFrQixTQUFILEdBQXFCLElBQWhCWixFQUFJLEVBQUpBLEtBQU1LLEVBQUksRUFBSkEsS0FDN0I4SixHQUFlcEIsS0FBSyxDQUFDL0ksS0FBQUEsRUFBTUssS0FBQUEsR0FDOUIsRUFFQThKLEdBQWVyQixtQiIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBcGkge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgICB0aGlzLl91cmwgPSBvcHRpb25zLmJhc2VVcmw7XHJcbiAgICAgIHRoaXMuX2hlYWRlciA9IG9wdGlvbnMuaGVhZGVycztcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0UmVzcG9uc2VEYXRhKHJlcykge1xyXG4gICAgICBpZiAocmVzLm9rKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9maWxlSW5mbygpIHtcclxuICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyXHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgICAuY2F0Y2goKGVycikgPT4gUHJvbWlzZS5yZWplY3QoZXJyKSlcclxuICB9XHJcblxyXG4gIGdldEluaXRpYWxDYXJkcygpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzYCwge1xyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlclxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IFByb21pc2UucmVqZWN0KGVycikpXHJcbiAgfVxyXG5cclxuICBlZGl0UHJvZmlsZUluZm8odXNlcikge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICBuYW1lOiB1c2VyLm5hbWUsXHJcbiAgICAgICAgICBhYm91dDogdXNlci5iaW9cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgICAgLmNhdGNoKChlcnIpID0+IFByb21pc2UucmVqZWN0KGVycikpXHJcbiAgfVxyXG5cclxuICBhZGROZXdDYXJkKGNhcmQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl91cmx9L2NhcmRzYCwge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICBuYW1lOiBjYXJkLnRpdGxlLFxyXG4gICAgICAgICAgbGluazogY2FyZC5saW5rXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oKHJlcykgPT4gdGhpcy5fZ2V0UmVzcG9uc2VEYXRhKHJlcykpXHJcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBQcm9taXNlLnJlamVjdChlcnIpKVxyXG4gIH07XHJcblxyXG4gIGRlbGV0ZUNhcmQoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcclxuICAgICAgfSlcclxuICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgLmNhdGNoKChlcnIpID0+IFByb21pc2UucmVqZWN0KGVycikpXHJcbiAgfVxyXG5cclxuICBwdXRMaWtlKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX3VybH0vY2FyZHMvJHtjYXJkSWR9L2xpa2VzYCwge1xyXG4gICAgICBtZXRob2Q6ICdQVVQnLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXIsXHJcbiAgICAgIH0pXHJcbiAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBQcm9taXNlLnJlamVjdChlcnIpKVxyXG4gIH07XHJcblxyXG4gIGRlbGV0ZUxpa2UoY2FyZElkKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcixcclxuICAgICAgfSlcclxuICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgLmNhdGNoKChlcnIpID0+IFByb21pc2UucmVqZWN0KGVycikpXHJcbiAgfTtcclxuXHJcbiAgZWRpdFVzZXJBdmF0YXIoYXZhdGFyKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fdXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYXZhdGFyOiBhdmF0YXJcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiBQcm9taXNlLnJlamVjdChlcnIpKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6ICdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTUyJyxcclxuICBoZWFkZXJzOiB7XHJcbiAgICBhdXRob3JpemF0aW9uOiAnOGNkNjM5MWYtMjc2Zi00NjIzLTg3ZGItMjYxNjhlYTBkYzEwJyxcclxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICB9XHJcbn0pOyIsImltcG9ydCB7IGFwaSB9IGZyb20gXCIuL0FwaVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gICBjb25zdHJ1Y3RvcihkYXRhLCB0ZW1wbGF0ZVNlbGVjdG9yLCB1c2VyLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZVN1cmVDYXJkRGVsZXRlLCBsaWtlVXBkYXRlKSB7XHJcbiAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICAgIHRoaXMuX2xpa2UgPSBkYXRhLmxpa2VzO1xyXG4gICAgICB0aGlzLl9jYXJkSWQgPSBkYXRhLl9pZDtcclxuICAgICAgdGhpcy5fdXNlcklkID0gdXNlcjtcclxuICAgICAgdGhpcy5fb3duZXJJZCA9IGRhdGEub3duZXI7XHJcbiAgICAgIHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IgPSB0ZW1wbGF0ZVNlbGVjdG9yO1xyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1cmVDYXJkRGVsZXRlID0gaGFuZGxlU3VyZUNhcmREZWxldGU7XHJcbiAgICAgIHRoaXMuX2xpa2VVcGRhdGUgPSBsaWtlVXBkYXRlO1xyXG5cclxuICAgfVxyXG4gICAvKiDQv9GA0Lgg0LvQsNC50LrQtSDRgdGA0LDQstC90LjQstCw0LXQvCDQsNC50LTQuCDRgdC10LHRjyDQuCDQstC70LDQtNC10LvRjNGG0LAuXHJcbiAgINC10YHQu9C4INC+0L3QuCAhPSDRgtC+INC+0YLQv9GA0LDQstC70Y/QtdC8INC30LDQv9GA0L7RgSDQvdCwINGB0LXRgNCy0LXRgCDQuCDQvNC10L3Rj9C10Lwg0YbQstC10YIg0LvQsNC50LrQsCArINC40YUg0LrQvtC70LjRh9C10YHRgtCy0L5cclxuICAg0LXRgdC70Lgg0L7QvdC4ID0g0YLQviDQvtGC0L/RgNCw0LLQu9GP0LXQvCDQt9Cw0L/RgNC+0YEg0L3QsCDRg9C00LDQu9C10L3QuNC1INGB0L3QuNC80LDQtdC8INC60LvQsNGB0YEg0LDQutGC0LjQstCwINC4INC80LXQvdGP0LXQvCDQutC+0LvQuNGH0LXRgdGC0LLQviAqL1xyXG5cclxuICAgX2hhbmRsZUNhcmRMaWtlKCkge1xyXG4gICAgICBpZiAodGhpcy5jaGVja0xpa2UoKSkge1xyXG4gICAgICAgICB0aGlzLmxpa2VCdG4uY2xhc3NMaXN0LnJlbW92ZSgnY2FyZHNfX2hlYXJ0X2FjdGl2ZScpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgIHRoaXMubGlrZUJ0bi5jbGFzc0xpc3QuYWRkKCdjYXJkc19faGVhcnRfYWN0aXZlJylcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkc19fbGlrZXMnKS50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2UubGVuZ3RoO1xyXG4gICB9O1xyXG5cclxuICAgc2V0TGlrZShkYXRhKSB7XHJcbiAgICAgIHRoaXMuX2xpa2UgPSBkYXRhO1xyXG4gICAgICB0aGlzLl9oYW5kbGVDYXJkTGlrZSgpXHJcbiAgIH1cclxuXHJcbiAgIGNoZWNrTGlrZSgpIHtcclxuICAgICAgdGhpcy5fbGlrZS5zb21lKCh1c2VyKSA9PiB7XHJcbiAgICAgICAgIHJldHVybiB1c2VyLl9pZCA9PT0gdGhpcy5fdXNlcklkXHJcbiAgICAgIH0pXHJcbiAgIH1cclxuXHJcbiAgIF9oYW5kbGVDYXJkRGVsZXRlKCkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICAgfTtcclxuXHJcbiAgIF9jcmVhdGVDYXJkKCkge1xyXG4gICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IpXHJcbiAgICAgICAgIC5jb250ZW50XHJcbiAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX2NhcmQnKVxyXG4gICAgICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gICB9O1xyXG5cclxuICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICB0aGlzLmxpa2VCdG4gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkc19faGVhcnQnKTtcclxuICAgICAgdGhpcy5saWtlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgICgpID0+IHtcclxuICAgICAgICAgdGhpcy5fbGlrZVVwZGF0ZSh0aGlzLCB0aGlzLl9jYXJkSWQpXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkc19fZGVsZXRlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgIHRoaXMuX2hhbmRsZVN1cmVDYXJkRGVsZXRlKClcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19pbWFnZS1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHtuYW1lOiB0aGlzLl9uYW1lLCBsaW5rOiB0aGlzLl9saW5rfSk7XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgYWRkQ2FyZCgpIHtcclxuICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2NyZWF0ZUNhcmQoKTtcclxuICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX3RleHQnKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19pbWFnZScpLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19pbWFnZScpLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX19saWtlcycpLnRleHRDb250ZW50ID0gdGhpcy5fbGlrZS5sZW5ndGg7XHJcbiAgICAgIGlmICh0aGlzLl9vd25lcklkLl9pZCAhPSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX2RlbGV0ZScpLnJlbW92ZSgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gICB9O1xyXG59OyIsImV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICAgY29uc3RydWN0b3IodmFsaWRhdGlvbkNvbmZpZywgZm9ybUVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5fdmFsaWRhdGlvbkNvbmZpZyA9IHZhbGlkYXRpb25Db25maWc7XHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgICAgIHRoaXMuX2lucHV0cyA9IEFycmF5LmZyb20odGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmlucHV0U2VsZWN0b3IpKTtcclxuICAgICAgdGhpcy5fZm9ybXMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5fdmFsaWRhdGlvbkNvbmZpZy5mb3JtU2VsZWN0b3IpKTtcclxuICAgICAgdGhpcy5fYnV0dG9uID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl92YWxpZGF0aW9uQ29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgfTtcclxuXHJcbiAgIF9pc1ZhbGlkKGlucHV0KSB7XHJcbiAgICAgIGlmICghaW5wdXQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XHJcbiAgICAgIH1cclxuICAgfTtcclxuXHJcbiAgIF9zaG93SW5wdXRFcnJvcihpbnB1dCkge1xyXG4gICAgICBjb25zdCBlcnJvciA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0LmlkfS1lcnJvcmApO1xyXG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgICAgZXJyb3IudGV4dENvbnRlbnQgPSBpbnB1dC52YWxpZGF0aW9uTWVzc2FnZTtcclxuICAgICAgZXJyb3IuY2xhc3NMaXN0LmFkZCh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmVycm9yQ2xhc3MpO1xyXG4gICB9XHJcblxyXG4gICBfaGlkZUlucHV0RXJyb3IoaW5wdXQpIHtcclxuICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dC5pZH0tZXJyb3JgKTtcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XHJcbiAgICAgIGVycm9yLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fdmFsaWRhdGlvbkNvbmZpZy5lcnJvckNsYXNzKTtcclxuICAgICAgZXJyb3IudGV4dENvbnRlbnQgPSAnJztcclxuICAgfVxyXG5cclxuICAgX3NldEJ1dHRvbkRpc2FibGVkKCkge1xyXG4gICAgICB0aGlzLl9idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgICB0aGlzLl9idXR0b24uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICB9O1xyXG5cclxuICAgX3NldEJ1dHRvbkFjdGl2ZSgpIHtcclxuICAgICAgdGhpcy5fYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fdmFsaWRhdGlvbkNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgIH07XHJcblxyXG4gICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICAgIGNvbnN0IGhhc0ludmFsaWRJbnB1dCA9IHRoaXMuX2lucHV0cy5zb21lKGlucHV0ID0+ICFpbnB1dC52YWxpZGl0eS52YWxpZCk7XHJcbiAgICAgIGlmIChoYXNJbnZhbGlkSW5wdXQpIHtcclxuICAgICAgICAgdGhpcy5fc2V0QnV0dG9uRGlzYWJsZWQoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgdGhpcy5fc2V0QnV0dG9uQWN0aXZlKCk7XHJcbiAgICAgIH1cclxuICAgfTtcclxuXHJcbiAgIF9oYW5kbGVTZXRWYWxpZGF0ZSgpIHtcclxuICAgICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1ZhbGlkKGlucHV0KTtcclxuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICB9O1xyXG5cclxuICAgcmVzZXRWYWxpZGF0aW9uKCkge1xyXG4gICAgICB0aGlzLl9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XHJcbiAgICAgICAgdGhpcy5fc2V0QnV0dG9uRGlzYWJsZWQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgZW5hYmxlVmFsaWRhdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVNldFZhbGlkYXRlKCk7XHJcbiAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcclxuICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgIH1cclxuICAgLy/QvtGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QvtCyXHJcbiAgIG9wZW4oKSB7XHJcbiAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlS2V5RXNjYXBlKTtcclxuICAgfTtcclxuIFxyXG4gICAvL9C30LDQutGA0YvRgtC40LUg0L/QvtC/0LDQv9C+0LJcclxuICAgY2xvc2UoKSB7XHJcbiAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlS2V5RXNjYXBlKTtcclxuICAgfTtcclxuXHJcbiAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfb3BlbmVkJykpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3B1cF9fY2xvc2UnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICB9KTtcclxuICAgfTtcclxuXHJcbiAgIF9oYW5kbGVLZXlFc2NhcGUgPSAoZSkgPT4ge1xyXG4gICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgIH07XHJcbn0iLCJleHBvcnQgY2xhc3MgU2VjdGlvbiB7XHJcbiAgI3JlbmRlcmVyXHJcbiAgI2NvbnRhaW5lclxyXG4gICAgY29uc3RydWN0b3IoeyByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuI3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy4jY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy/QtNC+0LHQsNCy0LvQtdC90LjQtSDRjdC70LXQvNC10L3RgtCwINCyINC60L7QvdGC0LXQudC90LXRgFxyXG4gICAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy4jY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICByZW5kZXJlcihpdGVtcywgdXNlcklkKSB7XHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgIHRoaXMuI3JlbmRlcmVyKGl0ZW0sIHVzZXJJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxufSIsImltcG9ydCB7IFBvcHVwIH0gZnJvbSAnLi9Qb3B1cC5qcyc7XHJcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9pbWFnZUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtaW1hZ2VfX3Bob3RvJyk7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VUaXRsZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1pbWFnZV9fdGV4dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v0L/QtdGA0LXQtNCw0LXQvCDRgdGB0YvQu9C60YMg0Lgg0L3QsNC30LLQsNC90LjQtSDQutCw0YDRgtC+0YfQutC4XHJcbiAgICBvcGVuKHt0aXRsZSwgbGlua30pIHtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VFbGVtZW50LnNyYyA9IGxpbms7XHJcbiAgICAgICAgdGhpcy5faW1hZ2VFbGVtZW50LmFsdCA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuX2ltYWdlVGl0bGUudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7UG9wdXB9IGZyb20gJy4vUG9wdXAuanMnO1xyXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZUZvcm1TdWJtaXQpIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgICAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5faW5wdXRzID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2lucHV0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0c1ZhbHVlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnB1dHNWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dHNWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRm9ybVN1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW5wdXRWYWx1ZXMoaXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBpdGVtW2lucHV0Lm5hbWVdO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3Ioe25hbWVTZWxlY3RvciwgYmlvU2VsZWN0b3IsIGF2YXRhclNlbGVjdG9yfSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7IFxyXG4gICAgICAgIHRoaXMuX2JpbyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYmlvU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYXZhdGFyU2VsZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVzZXJJbmZvKCkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJJbmZvID0ge1xyXG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LFxyXG4gICAgICAgICAgICBiaW86IHRoaXMuX2Jpby50ZXh0Q29udGVudCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mbztcclxuICAgIH07XHJcblxyXG4gICAgc2V0VXNlckluZm8ocHJvZmlsZURhdGEpIHtcclxuICAgICAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gcHJvZmlsZURhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9iaW8udGV4dENvbnRlbnQgPSBwcm9maWxlRGF0YS5iaW87XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QWxsSW5mbyhhbGxEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IGFsbERhdGEubmFtZTtcclxuICAgICAgICB0aGlzLl9iaW8udGV4dENvbnRlbnQgPSBhbGxEYXRhLmFib3V0O1xyXG4gICAgICAgIHRoaXMuX2F2YXRhci5zcmMgPSBhbGxEYXRhLmF2YXRhclxyXG4gICAgICAgIHRoaXMuX2lkID0gYWxsRGF0YS5faWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VXNlcklkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcclxuICAgIH0gXHJcbn0iLCJleHBvcnQgY29uc3QgcHJvZmlsZVBvcHVwQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlLXBvcHVwX19mb3JtJyk7XHJcbmV4cG9ydCBjb25zdCBwb3B1cEFkZEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19hZGQtYnV0dG9uJyk7XHJcbmV4cG9ydCBjb25zdCBhZGRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWFkZF9fZm9ybScpO1xyXG5leHBvcnQgY29uc3QgZWRpdEF2YXRhckJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19pbWFnZScpO1xyXG5leHBvcnQgY29uc3QgcG9wdXBBdmF0YXJGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWF2YXRhcl9fZm9ybScpO1xyXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvbkNvbmZpZyA9IHtcclxuICAgZm9ybVNlbGVjdG9yOiAnLnBvcHVwX19mb3JtJyxcclxuICAgaW5wdXRTZWxlY3RvcjogJy5wb3B1cF9faW5wdXQnLFxyXG4gICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fYnV0dG9uJyxcclxuICAgaW5hY3RpdmVCdXR0b25DbGFzczogJ3BvcHVwX19idXR0b25fZGlzYWJsZWQnLFxyXG4gICBpbnB1dEVycm9yQ2xhc3M6ICdwb3B1cF9faW5wdXRfdHlwZV9lcnJvcicsXHJcbiAgIGVycm9yQ2xhc3M6ICdwb3B1cF9fZXJyb3JfdmlzaWJsZSdcclxufTsiLCJpbXBvcnQgJy4vaW5kZXguY3NzJztcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XHJcbmltcG9ydCB7IEZvcm1WYWxpZGF0b3IgfSBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMnO1xyXG5pbXBvcnQgeyBQb3B1cCB9IGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXAuanMnO1xyXG5pbXBvcnQgeyBTZWN0aW9uIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcclxuaW1wb3J0IHsgUG9wdXBXaXRoSW1hZ2UgfSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcclxuaW1wb3J0IHsgUG9wdXBXaXRoRm9ybSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XHJcbmltcG9ydCB7IFVzZXJJbmZvIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Vc2VySW5mby5qcyc7XHJcbmltcG9ydCB7IGFwaSB9IGZyb20gJy4uL2NvbXBvbmVudHMvQXBpLmpzJztcclxuaW1wb3J0IHtcclxuICAgcHJvZmlsZVBvcHVwQnRuLFxyXG4gICBwcm9maWxlRm9ybSxcclxuICAgcG9wdXBBZGRCdG4sXHJcbiAgIGFkZEZvcm0sXHJcbiAgIGVkaXRBdmF0YXJCdG4sXHJcbiAgIHBvcHVwQXZhdGFyRm9ybSxcclxuICAgdmFsaWRhdGlvbkNvbmZpZyB9IGZyb20gJy4uL2NvbXBvbmVudHMvY29uc3RhbnRzLmpzJztcclxuXHJcbi8v0LLQsNC70LjQtNCw0YbQuNGPINGE0L7RgNC8XHJcbmNvbnN0IHByb2ZpbGVWYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvbkNvbmZpZywgcHJvZmlsZUZvcm0pO1xyXG5wcm9maWxlVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmNvbnN0IGNhcmRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGFkZEZvcm0pO1xyXG5jYXJkRm9ybVZhbGlkYXRpb24uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5jb25zdCBhdmF0YXJWYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGlvbkNvbmZpZywgcG9wdXBBdmF0YXJGb3JtKVxyXG5hdmF0YXJWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtuYW1lU2VsZWN0b3I6ICcucHJvZmlsZV9fdGl0bGUnLCBiaW9TZWxlY3RvcjogJy5wcm9maWxlX190ZXh0JywgYXZhdGFyU2VsZWN0b3I6ICcucHJvZmlsZV9faW1hZ2UnfSk7XHJcblxyXG4vL9C00L7QsdCw0LLQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C10Log0LIg0YDQsNC30LzQtdGC0LrRg1xyXG5jb25zdCBjYXJkTGlzdCA9IG5ldyBTZWN0aW9uKHtcclxuICAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICAgIGNhcmRMaXN0LmFkZEl0ZW0oY3JlYXRlTmV3Q2FyZChpdGVtKSk7XHJcbiAgICB9XHJcbn0sICcuY2FyZHNfX3RhYmxlJyk7XHJcblxyXG4vL9GB0L7Qt9C00LDQvdC40LUg0YHQv9C40YHQutCwINC60LDRgNGC0L7Rh9C10Log0Lgg0LjQvdGE0L4g0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C1XHJcblByb21pc2UuYWxsKFthcGkuZ2V0UHJvZmlsZUluZm8oKSwgYXBpLmdldEluaXRpYWxDYXJkcygpXSlcclxuICAgLnRoZW4oKFtkYXRhLCBjYXJkc10pID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0QWxsSW5mbyhkYXRhKTtcclxuICAgICAgY2FyZExpc3QucmVuZGVyZXIoY2FyZHMpO1xyXG4gICB9KVxyXG4gICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnRXJyb3IgbG9hZCBjYXJkcycsIGVycik7XHJcbiAgIH0pO1xyXG5cclxuLy/Rg9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcclxuY29uc3QgcG9wdXBEZWxldGVDYXJkID0gbmV3IFBvcHVwKCcucG9wdXBfX2RlbGV0ZScpO1xyXG5cclxucG9wdXBEZWxldGVDYXJkLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5jb25zdCBoYW5kbGVTdXJlQ2FyZERlbGV0ZSA9ICgpID0+IHtcclxuICAgcG9wdXBEZWxldGVDYXJkLm9wZW4oKTtcclxufTtcclxuXHJcbi8v0L7RgtC60YDRi9GC0LjQtSDRhNC+0YDQvNGLINGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y9cclxucHJvZmlsZVBvcHVwQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICBwb3B1cFByb2ZpbGVGb3JtLm9wZW4oKTtcclxuICAgcHJvZmlsZVZhbGlkYXRpb24ucmVzZXRWYWxpZGF0aW9uKClcclxuICAgY29uc3QgYWxsSW5mbyA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgIHBvcHVwUHJvZmlsZUZvcm0uc2V0SW5wdXRWYWx1ZXMoYWxsSW5mbyk7XHJcbn0pO1xyXG5cclxuLy/RgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC/0YDQvtGE0LjQu9GPXHJcbmNvbnN0IHBvcHVwUHJvZmlsZUZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnByb2ZpbGUtcG9wdXAnLCAodXNlckRhdGEpID0+IHtcclxuICAgYXBpLmVkaXRQcm9maWxlSW5mbyh1c2VyRGF0YSkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICBkYXRhID0gdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEpXHJcbiAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHVwZGF0aW5nIHByb2ZpbGUnLCBlcnIpO1xyXG4gICB9KVxyXG59KVxyXG5cclxucG9wdXBQcm9maWxlRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy/QvtGC0LrRgNGL0YLQuNC1INGA0LXQtNCw0LrRgtC40YDQstC+0LDQvdC40Y8g0LDQstCw0YLQsNGA0LBcclxuZWRpdEF2YXRhckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgcG9wdXBBdmF0YXIub3BlbigpO1xyXG4gICBhdmF0YXJWYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xyXG59KVxyXG5cclxuLy/RgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INCw0LLQsNGC0LDRgGFcclxuY29uc3QgcG9wdXBBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwLWF2YXRhcicsIChhdmF0YXIpID0+IHtcclxuICAgYXBpLmVkaXRVc2VyQXZhdGFyKGF2YXRhclsnYXZhdGFyLWxpbmsnXSkudGhlbigoYXZhdGFyVXJsKSA9PiB7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19pbWFnZScpLnNyYyA9IGF2YXRhclVybC5hdmF0YXI7XHJcbiAgIH0pLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHVwZGF0aW5nIGF2YXRhcicsIGVycik7XHJcbiAgIH0pXHJcbn0pO1xyXG5cclxucG9wdXBBdmF0YXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8v0L7RgtC60YDRi9GC0LjQtSDRhNC+0YDQvNGLINC00L7QsdCw0LLQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60LhcclxucG9wdXBBZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgIHBvcHVwQWRkRm9ybS5vcGVuKCk7XHJcbiAgIGNhcmRGb3JtVmFsaWRhdGlvbi5yZXNldFZhbGlkYXRpb24oKVxyXG59KTtcclxuXHJcbmNvbnN0IGxpa2VVcGRhdGUgPSAoY2FyZCwgY2FyZElkKSA9PiB7XHJcbiAgIGlmIChjYXJkLmNoZWNrTGlrZSgpKSB7XHJcbiAgICAgIGFwaS5kZWxldGVMaWtlKGNhcmRJZCkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgIGNhcmQuc2V0TGlrZShyZXMubGlrZXMpXHJcbiAgICAgIH0pXHJcbiAgIH0gZWxzZSB7XHJcbiAgICAgIGFwaS5wdXRMaWtlKGNhcmRJZCkudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgIGNhcmQuc2V0TGlrZShyZXMubGlrZXMpXHJcbiAgICAgIH0pXHJcbiAgIH1cclxufVxyXG4vL2NvbnN0IHVzZXJpZCA9IHVzZXJJbmZvLmdldFVzZXJJZCgpO1xyXG5cclxuLy/RgdC+0LfQtNCw0L3QuNC1INC90L7QstC+0Lkg0LrQsNGA0YLQvtGH0LrQuFxyXG5mdW5jdGlvbiBjcmVhdGVOZXdDYXJkKGl0ZW0pIHtcclxuICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGl0ZW0sICcudGVtcGxhdGUnLCB1c2VySW5mby5nZXRVc2VySWQoKSwgaGFuZGxlQ2FyZENsaWNrLCBoYW5kbGVTdXJlQ2FyZERlbGV0ZSwgbGlrZVVwZGF0ZSk7XHJcblxyXG4gICByZXR1cm4gY2FyZC5hZGRDYXJkKCk7XHJcbn1cclxuXHJcbi8v0LTQvtCx0LDQstC70LXQvdC40LUg0LrQsNGA0YLQvtGH0LrQuFxyXG5jb25zdCBwb3B1cEFkZEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybSgnLnBvcHVwLWFkZCcsIChjYXJkRGF0YSkgPT4ge1xyXG4gICBhcGkuYWRkTmV3Q2FyZChjYXJkRGF0YSkudGhlbigoaXRlbSkgPT4ge1xyXG4gICAgICBjYXJkTGlzdC5hZGRJdGVtKGNyZWF0ZU5ld0NhcmQoaXRlbSkpO1xyXG4gICB9KS5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBhZGQgY2FyZCcsIGVycik7XHJcbiAgIH0pXHJcblxyXG59KTtcclxuXHJcbnBvcHVwQWRkRm9ybS5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcG9wdXBJbWFnZU9wZW4gPSBuZXcgUG9wdXBXaXRoSW1hZ2UoJy5wb3B1cC1pbWFnZScpO1xyXG5cclxuLy/QvtGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDRgSDQutCw0YDRgtC40L3QutC+0LlcclxuY29uc3QgaGFuZGxlQ2FyZENsaWNrID0gKHtuYW1lLCBsaW5rfSkgPT4ge1xyXG4gICBwb3B1cEltYWdlT3Blbi5vcGVuKHtuYW1lLCBsaW5rfSk7XHJcbn07XHJcblxyXG5wb3B1cEltYWdlT3Blbi5zZXRFdmVudExpc3RlbmVycygpOyJdLCJuYW1lcyI6WyJhcGkiLCJvcHRpb25zIiwidGhpcyIsIl91cmwiLCJiYXNlVXJsIiwiX2hlYWRlciIsImhlYWRlcnMiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0Iiwic3RhdHVzIiwiZmV0Y2giLCJ0aGVuIiwiX2dldFJlc3BvbnNlRGF0YSIsImNhdGNoIiwiZXJyIiwidXNlciIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwibmFtZSIsImFib3V0IiwiYmlvIiwiY2FyZCIsInRpdGxlIiwibGluayIsImNhcmRJZCIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJDYXJkIiwiZGF0YSIsInRlbXBsYXRlU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVTdXJlQ2FyZERlbGV0ZSIsImxpa2VVcGRhdGUiLCJfbmFtZSIsIl9saW5rIiwiX2xpa2UiLCJsaWtlcyIsIl9jYXJkSWQiLCJfaWQiLCJfdXNlcklkIiwiX293bmVySWQiLCJvd25lciIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVTdXJlQ2FyZERlbGV0ZSIsIl9saWtlVXBkYXRlIiwiY2hlY2tMaWtlIiwibGlrZUJ0biIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsIl9lbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiX2hhbmRsZUNhcmRMaWtlIiwic29tZSIsImRvY3VtZW50IiwiY29udGVudCIsImNsb25lTm9kZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfY3JlYXRlQ2FyZCIsIl9zZXRFdmVudExpc3RlbmVycyIsInNyYyIsImFsdCIsIkZvcm1WYWxpZGF0b3IiLCJ2YWxpZGF0aW9uQ29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfdmFsaWRhdGlvbkNvbmZpZyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dHMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9mb3JtcyIsImZvcm1TZWxlY3RvciIsIl9idXR0b24iLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImlucHV0IiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsImVycm9yIiwiaWQiLCJpbnB1dEVycm9yQ2xhc3MiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImVycm9yQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiX3NldEJ1dHRvbkRpc2FibGVkIiwiX3NldEJ1dHRvbkFjdGl2ZSIsImZvckVhY2giLCJfaXNWYWxpZCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsIl9oYW5kbGVTZXRWYWxpZGF0ZSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImUiLCJrZXkiLCJjbG9zZSIsIl9wb3B1cCIsIl9oYW5kbGVLZXlFc2NhcGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0IiwidGFyZ2V0IiwiY29udGFpbnMiLCJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJyZW5kZXJlciIsImVsZW1lbnQiLCJwcmVwZW5kIiwiaXRlbXMiLCJ1c2VySWQiLCJpdGVtIiwiUG9wdXBXaXRoSW1hZ2UiLCJfaW1hZ2VFbGVtZW50IiwiX2ltYWdlVGl0bGUiLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlRm9ybVN1Ym1pdCIsIl9oYW5kbGVGb3JtU3VibWl0IiwiX2Zvcm0iLCJfaW5wdXRzVmFsdWVzIiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsIl9nZXRJbnB1dFZhbHVlcyIsInJlc2V0IiwiVXNlckluZm8iLCJuYW1lU2VsZWN0b3IiLCJiaW9TZWxlY3RvciIsImF2YXRhclNlbGVjdG9yIiwiX2JpbyIsIl9hdmF0YXIiLCJfdXNlckluZm8iLCJwcm9maWxlRGF0YSIsImFsbERhdGEiLCJwcm9maWxlUG9wdXBCdG4iLCJwcm9maWxlRm9ybSIsInBvcHVwQWRkQnRuIiwiYWRkRm9ybSIsImVkaXRBdmF0YXJCdG4iLCJwb3B1cEF2YXRhckZvcm0iLCJwcm9maWxlVmFsaWRhdGlvbiIsImVuYWJsZVZhbGlkYXRpb24iLCJjYXJkRm9ybVZhbGlkYXRpb24iLCJhdmF0YXJWYWxpZGF0aW9uIiwidXNlckluZm8iLCJjYXJkTGlzdCIsImFkZEl0ZW0iLCJjcmVhdGVOZXdDYXJkIiwiYWxsIiwiZ2V0UHJvZmlsZUluZm8iLCJnZXRJbml0aWFsQ2FyZHMiLCJjYXJkcyIsInNldEFsbEluZm8iLCJjb25zb2xlIiwibG9nIiwicG9wdXBEZWxldGVDYXJkIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJvcGVuIiwicG9wdXBQcm9maWxlRm9ybSIsInJlc2V0VmFsaWRhdGlvbiIsImFsbEluZm8iLCJnZXRVc2VySW5mbyIsInNldElucHV0VmFsdWVzIiwidXNlckRhdGEiLCJlZGl0UHJvZmlsZUluZm8iLCJzZXRVc2VySW5mbyIsInBvcHVwQXZhdGFyIiwiZWRpdFVzZXJBdmF0YXIiLCJhdmF0YXJVcmwiLCJwb3B1cEFkZEZvcm0iLCJkZWxldGVMaWtlIiwic2V0TGlrZSIsInB1dExpa2UiLCJnZXRVc2VySWQiLCJhZGRDYXJkIiwiY2FyZERhdGEiLCJhZGROZXdDYXJkIiwicG9wdXBJbWFnZU9wZW4iXSwic291cmNlUm9vdCI6IiJ9